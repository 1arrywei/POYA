@model POYA.Areas.XUserFile.Models.LUserFile
@using POYA.Unities.Helpers;
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@Localizer["Select files you want to upload"]</h1>
<hr />
<div class="row" name="FileUploadEle">
    <div class="col col-sm-10 col-md-8 col-lg-8">
        <div class="form-group">
            <div class="input-group File-Select-Upload">
                <input type="text" id="SelectFileInput" class="form-control" placeholder="@Localizer["Select file"]" aria-label="@Localizer["Select file"]">
                <div class="input-group-append">
                    <a id="SelectFileA" class="btn btn-outline-info">@Localizer["Select file"]</a>
                    <a id="UploadA" class="btn btn-outline-info">@Localizer["Upload"]</a>
                </div>
            </div>
            <a id="BackA" class="btn btn-outline-info">&laquo; @Localizer["Back"]</a>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/js-spark-md5/spark-md5.min.js"></script>

    <script>
    //========  VALUE       ========//

        var MD5Array = new Array();

        var MaxMultipartBodyLength = @(LValue.MaxMultipartBodyLengthLimit);
        var InDirId = "@ViewData["InDirId"]";
        //var L_XSRF_TOKEN = "@@(CSRF.GetAndStoreTokens(Context).RequestToken)";
        var FileIsSelected = "@Localizer[ "The file is selected"]";

        var FileIsTooLarge =
            `<strong>@Localizer["Oops"]. . .</strong>@Localizer["File is limit to less than"]
            ${OptimizeSizeShow( @(LValue.MaxMultipartBodyLengthLimit/1_000_000))}`;

        var GetRemoveFileEleId = (Id) => `RemoveFileEle_${Id}`;
        var GetFileNameId = (Id) => `FileName_${Id}`;
        var GetUploadProgressId = (Id ) => `UploadProgress_${Id}`;
        //  var RemoveUploadedFileInput = (Id) => `RemoveUploadedFileInput${Id}`;
        var GetFileInputId = (Id) => `FileInput_${Id}`;
        /**
        * Return the alert html string
        * @@param {string} ClassType The class type >_
        *      primary/secondary/success/info/danger/warning/dark/light
        * @@param  {string} Message The message
        */
        var AlertDIV = (ClassType, Message) => `
                            <div class="alert alert-${ClassType} alert-dismissible fade show" role="alert">${Message}
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                                </button>
                            </div>`;

        /**
        * Return the file div message
        * @@param  {String} Id The id
        */
        var FileInfo = (Id = NewGuid()) => `
                        <div id='${Id}' name="FileDIV">
                            <input id="${GetFileInputId(Id)}" LID="${Id}" name="FileInputEle" type="file" onchange="GetMD58AddToArray('${Id}')" hidden/>
                            <span>
                                <span id="${GetRemoveFileEleId(Id)}" name="RemoveFileEle" onclick="RemoveFileEleClick('${Id}')">&times</span>
                                <span id="${GetUploadProgressId(Id)}" class="UploadProgress"></span>
                                <span id="${GetFileNameId(Id)}" name="FileNameEle"></span>
                            </span>
                        </div>`;

        //========  UI      ========//

        function MakeFileDivTitleToMD5(Id,MD5) {
            $(`#${Id}`).attr("title",`MD5: ${MD5}`);
        }

        /**
        * Make a alert
        * @@param  {string}  ClassType The class type >_
        *  primary/secondary/success/info/danger/warning/dark/light
        * @@param {string}  Message The alert message
        * @@param {number}  CloseAfter Close it after {}  millisecond, default value is 2500
        */
        function MakeAlert (ClassType,Message,CloseAfter=2500) {
            $(AlertDIV(ClassType, Message)).insertBefore("[name='FileUploadEle']:last");
            window.setTimeout(function () {
                $('.alert').alert('close');
            }, CloseAfter);
        }

        function RemoveFileEleClick(Id ) {
            $(`#${Id}`).remove();
            RemoveItemInMD5Array(Id); //  !!
        }

        function ShowFileTooLarge8RemoveFileEle() {
            $("[name='FileDIV']:last").remove();
            MakeAlert("warning", FileIsTooLarge);
        }

        function ReadMD5Tip(Id) {
            UpdateProgress(Id, "@(Localizer["Reading"]). . .");
        }

        /**
        * Update progress
        * @@param {String}  Id The id of main div
        * @@param {string} Progress_ The progress , the percentage and the tip of finish
        */
        function UpdateProgress(Id, Progress_) {
            $(`#${GetUploadProgressId(Id)}`).html(Progress_);
        }

        function ShowLastFilePath(Id) {
            $(`#${GetFileNameId(Id)}`).text($("input[name='FileInputEle']:last").val());
            //  $("#" + Id).show();

        }

        function ReadMD5FinishTip(Id) {
            UpdateProgress(Id, "");

        }

        function SelectFile() {
            if ($("input[name='FileInputEle']:last").val() == "") {
                //  $("input[name='FileInput']:last").hide();
                $("input[name='FileInputEle']:last").click();
            } else {
                $(".form-group").append(FileInfo());
                ShowOrHideLastRemoveFileEle(false);
                /// $("input[name='FileInput']:last").hide();
                $("input[name='FileInputEle']:last").click();
            }
        }

        /**
        * Show or hide last RemoveFileDIV, or it leads to a poor user experience
        * @@param {boolean} IsShow show or hide
        */
        function ShowOrHideLastRemoveFileEle (IsShow) {
            if (IsShow) {
                $("[name='RemoveFileEle']:last").show();
                return;
            }
            $("[name='RemoveFileEle']:last").hide();
        }

        /**
        * Remove file input after file is "upload"
        * @@param  {String}  Id The id of file div
        */
        function RemoveUploadedFileInput  (Id )  {
            $(`#${GetFileInputId(Id)}`).remove();
        };


    //========  SERVICE     ========//
        function CheckMD58UploadFiles() {
            if (MD5Array.length < 1) return;
            if (document.getElementsByName("FileInputEle").length < 1) return;
            var File8MD5s = new Array();
            MD5Array.forEach(function (value, index, array) {
                var Id_ = value["Id"];
                var FileName_ = document.getElementById(GetFileInputId(Id_)).files[0].name;
                File8MD5s.push({ Id: String(Id_), FileName: String(FileName_), MD5: String(value["MD5"]) });
            });
            console.log(`File8MD5s >${JSON.stringify( File8MD5s)}`);
            $.ajax({
                url: "@(Url.Action("CheckMD5"))",
                type: "POST",
                data: {
                    LContrastMD5: {
                        InDirId: InDirId, File8MD5s: File8MD5s
                    }
                },
                dataType: "json",
                headers: {
                    "L-XSRF-TOKEN": "@(CSRF.GetAndStoreTokens(Context).RequestToken)"
                },

                /**
                 * Return the Id of uploaded file
                 * @@param {Array<number>} IdArray Uploaded id array
                 */
                success: function (IdArray) {
                    console.log("Contrast>>"+IdArray);
                    IdArray.forEach(function (value) {
                        RemoveItemInMD5Array(value);
                        RemoveUploadedFileInput(value);
                        UpdateProgress(value, "&radic;");
                    });
                    UploadFile();
                },
                error: function () {
                    //  MakeAlert();
                }
            });
        }

        function UploadFile() {
            if ($(`[name='FileInputEle']`).length < 1) return;
            $(`[name='FileInputEle']`).each(function (index, element) {
                if ($(element).val() == "") return;
                var Id_ = $(this).attr("lid");  //   Number(this.id.split("_")[1]);
                console.log(`Upload >${Id_}`);
                var File_ = document.getElementById(this.id).files[0];
                var _FormData = new FormData();
                _FormData.append("LFile", File_, File_.name);
                _FormData.append("InDirId", InDirId);
                _FormData.append("Id", Id_);
                $.ajax({
                    url: "@(Url.Action("Create"))",
                    type: "POST",
                    data: _FormData,
                    processData: false,
                    contentType: false,
                    //  contentType: "multipart/form-data",
                    headers: {
                        "L-XSRF-TOKEN": "@(CSRF.GetAndStoreTokens(Context).RequestToken)"
                    },
                    /**
                     * REFERENCE    https://www.jianshu.com/p/eb119affdc25
                     * THANK        https://www.jianshu.com/u/9ca9c65ce397
                     */
                    xhr: function () {
                        var xhr = $.ajaxSettings.xhr();
                        if (xhr.upload) {
                            xhr.upload.addEventListener("progress", function (e) {
                                var loaded = e.loaded;
                                var tot = e.total;
                                //  console.log(">>"+Id_);
                                var per = Math.floor(100 * loaded / tot);
                                UpdateProgress(Id_, per + "%");
                                console.log(`Upload >>>>${per}`);
                            }, false);
                            return xhr;
                        }
                    },
                    /**
                     * Retuen the id
                     */
                    success: function (Response) {
                        //  console.log("Upload file>>"+Response["Id"]);
                        if (Response["Status"] == true) {
                            console.log(`Response["Id"] > ${Response["Id"]}`);
                            UpdateProgress(Response["Id"], "&radic;");
                            RemoveItemInMD5Array(Response["Id"]);
                            RemoveUploadedFileInput(Response["Id"]);
                        } else {
                            MakeAlert("warning", Response["Msg"]);
                        }
                    },
                    error: function () {
                        MakeAlert("danger", "@Localizer["An error has occurred. . . , engineers are on their way"]");
                    }
                });
            });
        }

        //========  DATA        ========//

        /**
         * Remove the item in MD5Array
         * @@param {String} Id The id of item(it is the id of Value.FileInfo())
         */
        function RemoveItemInMD5Array(Id ) {
            MD5Array.forEach(function (value, index, array) {
                if (value["Id"] == Id) {
                    MD5Array.splice(index, 1);
                }
            });
        }

        /**
        * Get md5 of file and add it to array
        * REFERENCE    https://blog.csdn.net/liguoqingxjxcc/article/details/81664245
        * THRNK        https://blog.csdn.net/liguoqingxjxcc
        * @@param {String} Id The id of file
        */
        function GetMD58AddToArray(Id) {
            $(`#${Id}`).show(); //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            var File_ = document.getElementById(GetFileInputId(Id)).files[0];
            if (File_.size > MaxMultipartBodyLength) {   //  (FileLimit) * 1024 * 1024
                ShowFileTooLarge8RemoveFileEle();
                return;
            }
            ReadMD5Tip(Id);
            var BlobSlice_ = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,
                ChunkSize = 2 * 1024 * 1024,
                Chunks = Math.ceil(File_.size / ChunkSize),
                CurrentChunk = 0,
                Spark_ = new SparkMD5.ArrayBuffer(),
                FileReader_ = new FileReader();
            FileReader_.onload = function (e) {
                Spark_.append(e.target.result);
                CurrentChunk++;
                if (CurrentChunk < Chunks) {
                    loadNext();
                } else {
                    var MD5 = String(Spark_.end());
                    var IsSelected = false;
                    MD5Array.forEach(function (value, index, array) {
                        if (value["MD5"] == MD5) {
                            IsSelected = true;
                        }
                    });
                    if (IsSelected) {
                        RemoveFileEleClick(Id);
                        MakeAlert("warning", FileIsSelected);
                        //  _UI
                    } else {
                        MD5Array.push({ Id: Id, MD5: MD5 });
                        ReadMD5FinishTip(Id);
                        ShowLastFilePath(Id);
                        ShowOrHideLastRemoveFileEle(true);
                        MakeFileDivTitleToMD5(Id, MD5);
                        //  console.log(MD5);
                    }
                }
            };
            FileReader_.onerror = function () {
                console.warn('oops, something went wrong');
            };
            function loadNext() {
                var Start = CurrentChunk * ChunkSize,
                    End = ((Start + ChunkSize) >= File_.size) ? File_.size : Start + ChunkSize;
                FileReader_.readAsArrayBuffer(BlobSlice_.call(File_, Start, End));
            }
            loadNext();
        }

        $(document).ready(function () {
            $("#SelectFileInput,#SelectFileA").on("click", function () {
                SelectFile();
                event.preventDefault();
            });

            $("#UploadA").on("click", function () {
                if ($("[name='FileInputEle']").length < 1) return;
                CheckMD58UploadFiles();
                event.preventDefault();
            });
        });
    </script>



}

@section Styles{
    <style>
        .File-Select-Upload{
            zoom:120%;
        }
        .UploadProgress {
            color: blue;
        }

        [name='RemoveFileEle'] {
            color: red;
        }

            [name='RemoveFileEle']:hover {
                color: red;
                zoom: 120%;
            }

        .form-group {
        }

        #BackA {
            margin-top: 10px;
        }

        [name='FileDIV'] {
            font-size: 120%;
        }
    </style>
}


@*


        [name='FileDIV']:after {
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            </div>
        </form>

    <div class="form-group">
        <label asp-for="UserId" class="control-label"></label>
        <input asp-for="UserId" class="form-control" />
        <span asp-validation-for="UserId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="SharedCode" class="control-label"></label>
        <input asp-for="SharedCode" class="form-control" />
        <span asp-validation-for="SharedCode" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="DOGenerating" class="control-label"></label>
        <input asp-for="DOGenerating" class="form-control" />
        <span asp-validation-for="DOGenerating" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="InDirId" class="control-label"></label>
        <input asp-for="InDirId" class="form-control" />
        <span asp-validation-for="InDirId" class="text-danger"></span>
    </div>
*@
